package com.altioraen.backend.apirest.dao;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

import com.altioraen.backend.apirest.entities.Client;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

@Repository
public class ClientDao {

    @PersistenceContext
    private EntityManager entityManager;
	
	public List<Client> getClientList() {
        List<Client> clients = null;
		try {
			String hql = "select c1_0.id,c1_0.created_at,c1_0.dni,c1_0.last_name,c1_0.name,c1_0.order_count,c1_0.updated_at from clients c1_0 left join orders o1_0 on c1_0.id=o1_0.client_id group by c1_0.id";
	        List<Object[]> resultList = entityManager.createQuery(hql, Object[].class).getResultList();

	        clients = new ArrayList<>();
	        for (Object[] result : resultList) {
	            Client client = (Client) result[0];
	            Long orderCount = (Long) result[1];
	            client.setOrderCount(orderCount.intValue());
	            clients.add(client);
	        }
	        return clients;
		} catch (Exception e) {
			return clients;
		}  finally {
			clients = null;
		}
	}
	
	public Client findById(Long id) {
		Client clientFound = null;
        try {
			clientFound = entityManager.find(Client.class, id);
			return clientFound;
        } catch (Exception e) {
			return clientFound;
		} finally {
			clientFound = null;
		}
    }

    public Client save(Client client) {
		Client clientCreated = null;
        try {
        	entityManager.persist(client);
        	entityManager.flush();
			clientCreated = client;
			return clientCreated;
        } catch (Exception e) {
			return clientCreated;
		} finally {
			clientCreated = null;
		}
    }

    public Client update(Client client) {
		Client clientUpdated = null;
        try {
        	entityManager.merge(client);
        	entityManager.flush();
			clientUpdated = client;
			return clientUpdated;
        } catch (Exception e) {
			return clientUpdated;
		} finally {
			clientUpdated = null;
		}
    }

    public boolean delete(Client client) {
    	boolean clientDeleted = false;
        try {
        	entityManager.remove(client);
        	entityManager.flush();
        	clientDeleted = true;
			return clientDeleted;
        } catch (Exception e) {
			return clientDeleted;
		}
    }
}
