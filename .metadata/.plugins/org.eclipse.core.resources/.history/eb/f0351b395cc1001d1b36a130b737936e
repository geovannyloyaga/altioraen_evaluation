package com.altioraen.backend.apirest.business.logic;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.altioraen.backend.apirest.dao.ClientDao;
import com.altioraen.backend.apirest.dto.ResponseDto;
import com.altioraen.backend.apirest.entities.Client;
import com.altioraen.backend.apirest.interfaces.IClientService;

@Service
public class ClientService implements IClientService {

	@Autowired
	private ClientDao clientDao;

	public void setClientDao(ClientDao clientDao) {
		this.clientDao = clientDao;
	}
	
	@Autowired
	private PlatformTransactionManager transactionManager;
	
	public void setTransactionManager(PlatformTransactionManager transactionManager) {
		this.transactionManager = transactionManager;
	}

	public ResponseDto<Client> agregarCliente(Client client) {
		Client clientCreated = null;
		ResponseDto<Client> responseClient = new ResponseDto<Client>(200, null, null);
		
		DefaultTransactionDefinition definirTransaccion = new DefaultTransactionDefinition();
		definirTransaccion.setReadOnly(Boolean.FALSE);
		definirTransaccion.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT);
		TransactionStatus statusTransaction = this.transactionManager.getTransaction(definirTransaccion);
		
		try {
			clientCreated = this.clientDao.addClient(client);
			if (clientCreated != null && clientCreated.getId() != null) {
				responseClient.setResponseObject(clientCreated);
				this.transactionManager.commit(statusTransaction);
				responseClient.setCode(200);
			} else {					
				this.transactionManager.rollback(statusTransaction);
				responseClient.setCode(400);
				responseClient.setError("Error al momento de crear el cliente");
			}
			return responseClient;
		} catch (Exception e) {
			this.transactionManager.rollback(statusTransaction);
			responseClient.setCode(400);
			responseClient.setError("Error al momento de crear el cliente");
			return responseClient;
		} finally {
			clientCreated = null;
			responseClient = null;
			definirTransaccion = null;
			statusTransaction = null;
		}
	}
	
	public ResponseDto<Client> updateClient(Client client) {
		Client clientUpdated = null;
		ResponseDto<Client> responseClient = new ResponseDto<Client>(200, null, null);
		
		DefaultTransactionDefinition definirTransaccion = new DefaultTransactionDefinition();
		definirTransaccion.setReadOnly(Boolean.FALSE);
		definirTransaccion.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT);
		TransactionStatus statusTransaction = this.transactionManager.getTransaction(definirTransaccion);
		
		try {
			clientUpdated = this.clientDao.updateClient(client);
			if (clientUpdated != null && clientUpdated.getId() != null) {
				responseClient.setResponseObject(clientUpdated);
				this.transactionManager.commit(statusTransaction);
				responseClient.setCode(200);	
			} else {
				this.transactionManager.rollback(statusTransaction);
				responseClient.setCode(400);
				responseClient.setError("Error al momento de crear el cliente");
			}
			return responseClient;
		} catch (Exception e) {
			this.transactionManager.rollback(statusTransaction);
			responseClient.setCode(400);
			responseClient.setError("Error al momento de crear el cliente");
			return responseClient;
		} finally {
			clientUpdated = null;
			responseClient = null;
			definirTransaccion = null;
			statusTransaction = null;
		}
	}
}
