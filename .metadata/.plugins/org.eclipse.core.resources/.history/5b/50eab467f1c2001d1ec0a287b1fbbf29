package com.altioraen.backend.apirest.business.logic;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.altioraen.backend.apirest.dao.OrderDao;
import com.altioraen.backend.apirest.dto.ResponseDto;
import com.altioraen.backend.apirest.dto.ResponseListDto;
import com.altioraen.backend.apirest.entities.Order;
import com.altioraen.backend.apirest.interfaces.IOrderService;

public class OrderService implements IOrderService {

	@Autowired
	private OrderDao orderDao;

	public void setOrderDao(OrderDao orderDao) {
		this.orderDao = orderDao;
	}
	
	@Autowired
	private PlatformTransactionManager transactionManager;

	public void setTransactionManager(PlatformTransactionManager transactionManager) {
		this.transactionManager = transactionManager;
	}

	public ResponseDto<Order> save(Order order) {
		Order orderCreated = null;
		ResponseDto<Order> responseOrder = new ResponseDto<Order>(200, null, null);
		
		DefaultTransactionDefinition definirTransaccion = new DefaultTransactionDefinition();
		definirTransaccion.setReadOnly(Boolean.FALSE);
		definirTransaccion.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT);
		TransactionStatus statusTransaction = this.transactionManager.getTransaction(definirTransaccion);
		
		try {
			orderCreated = this.orderDao.save(order);
			if (orderCreated != null && orderCreated.getId() != null) {
				responseOrder.setResponseObject(orderCreated);
				this.transactionManager.commit(statusTransaction);
				responseOrder.setCode(200);
			} else {					
				this.transactionManager.rollback(statusTransaction);
				responseOrder.setCode(409);
				responseOrder.setError("Error al momento de crear la orden");
			}
			return responseOrder;
		} catch (Exception e) {
			this.transactionManager.rollback(statusTransaction);
			responseOrder.setCode(409);
			responseOrder.setError("Error al momento de crear la orden");
			return responseOrder;
		} finally {
			orderCreated = null;
			responseOrder = null;
			definirTransaccion = null;
			statusTransaction = null;
		}
	}
	
	public ResponseDto<Order> update(Order order) {
		Order orderUpdated = null;
		ResponseDto<Order> responseOrder = new ResponseDto<Order>(200, null, null);
		
		DefaultTransactionDefinition definirTransaccion = new DefaultTransactionDefinition();
		definirTransaccion.setReadOnly(Boolean.FALSE);
		definirTransaccion.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT);
		TransactionStatus statusTransaction = this.transactionManager.getTransaction(definirTransaccion);
		
		try {
			orderUpdated = this.orderDao.update(order);
			if (orderUpdated != null && orderUpdated.getId() != null) {
				responseOrder.setResponseObject(orderUpdated);
				this.transactionManager.commit(statusTransaction);
				responseOrder.setCode(200);	
			} else {
				this.transactionManager.rollback(statusTransaction);
				responseOrder.setCode(409);
				responseOrder.setError("Error al momento de crear la orden");
			}
			return responseOrder;
		} catch (Exception e) {
			this.transactionManager.rollback(statusTransaction);
			responseOrder.setCode(409);
			responseOrder.setError("Error al momento de crear la orden");
			return responseOrder;
		} finally {
			orderUpdated = null;
			responseOrder = null;
			definirTransaccion = null;
			statusTransaction = null;
		}
	}
	
	@Transactional(readOnly=true)
	public ResponseListDto<Order> getOrderList() {
		ResponseListDto<Order> responseOrderList = new ResponseListDto<>(200, null, new ArrayList<>(), 0);
		List<Order> foundOrderList = null;
		try {
			foundOrderList = this.orderDao.getOrderList();
			responseOrderList.setResponseList(foundOrderList);
			if (foundOrderList.isEmpty()) {
				responseOrderList.setCode(200);
			} else {
				responseOrderList.setCode(409);
				responseOrderList.setError("Error al momento de obtener la lista de ordenes");
			}
			return responseOrderList;
		} catch (Exception e) {
			responseOrderList.setCode(409);
			responseOrderList.setError("Error al momento de obtener la lista de ordenes");
			return responseOrderList;
		} finally {
			responseOrderList = null;
			foundOrderList = null;
		}
	}
}
