package com.altioraen.backend.apirest.business.logic;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import com.altioraen.backend.apirest.dao.ClientDao;
import com.altioraen.backend.apirest.dto.ResponseDto;
import com.altioraen.backend.apirest.entities.Client;
import com.altioraen.backend.apirest.interfaces.IClientService;

@Service
public class ClientService implements IClientService {

	@Autowired
	private ClientDao clientDao;

	public void setClientDao(ClientDao clientDao) {
		this.clientDao = clientDao;
	}
	
	@Autowired
	private PlatformTransactionManager transactionManager;
	
	public void setTransactionManager(PlatformTransactionManager transactionManager) {
		this.transactionManager = transactionManager;
	}



	public ResponseDto<Client> agregarCliente(Client client) {
		Client clientCreated = null;
		ResponseDto<Client> responseClient = new ResponseDto<Client>(200, null, null);
		
		DefaultTransactionDefinition definirTransaccion = new DefaultTransactionDefinition();
		definirTransaccion.setReadOnly(Boolean.FALSE);
		definirTransaccion.setIsolationLevel(TransactionDefinition.ISOLATION_DEFAULT);
		TransactionStatus statusTransaction = this.transactionManager.getTransaction(definirTransaccion);
		
		try {
			autenticacion = JwtUtil.getAuthentication(autorizacion);
			if (autenticacion != null && autenticacion.isAuthenticated()) {
				pboEstadoActivo = this.pboEstadoDAO.obtenerEstado_Nombre(CotizadorMensajeAplicacion.obtenerPropiedad("estado_activo"));
				clienteCreado = this.pboClienteDAO.agregarCliente(client.getPboCliente());
				if (clienteCreado != null && clienteCreado.getPcId() != null) {
					responseClient.setRespuestaObjeto(clienteCreado);
					if (client.getDirecciones() != null && !client.getDirecciones().isEmpty()) {
						for (PboDireccion pboDireccion : client.getDirecciones()) {
							pboDireccion.setPboCliente(new PboCliente());
							pboDireccion.getPboCliente().setPcId(client.getPboCliente().getPcId());
							pboDireccion.setPboEstado(new PboEstado());
							pboDireccion.getPboEstado().setPeId(pboEstadoActivo.getPeId());
							pboDireccion.setPboUsuario(new PboUsuario());
							pboDireccion.getPboUsuario().setPuId(client.getPboCliente().getPboUsuario().getPuId());
						}
						direccionListaCreada = this.pboDireccionDAO.agregarDireccionLista(client.getDirecciones());
						if (direccionListaCreada != null && !direccionListaCreada.isEmpty()) {
							this.transactionManager.commit(statusTransaction);
							responseClient.setCodigo(new BigInteger(CotizadorMensajeAplicacion.obtenerPropiedad("codigo_respuesta_ok")));
							responseClient.setTipo(CotizadorMensajeAplicacion.obtenerPropiedad("tipo_respuesta_created_ok"));
							responseClient.setMensaje(CotizadorMensajeAplicacion.obtenerPropiedad("mensaje_respuesta_cliente_creado"));						
						}else {
							this.transactionManager.rollback(statusTransaction);
							responseClient.setCodigo(new BigInteger(CotizadorMensajeAplicacion.obtenerPropiedad("codigo_respuesta_bad_request")));
							responseClient.setTipo(CotizadorMensajeAplicacion.obtenerPropiedad("tipo_respuesta_not_created"));
							responseClient.setMensaje(CotizadorMensajeAplicacion.obtenerPropiedad("mensaje_respuesta_cliente_no_creado"));
						}
					}else {
						this.transactionManager.commit(statusTransaction);
						responseClient.setCodigo(new BigInteger(CotizadorMensajeAplicacion.obtenerPropiedad("codigo_respuesta_ok")));
						responseClient.setTipo(CotizadorMensajeAplicacion.obtenerPropiedad("tipo_respuesta_created_ok"));
						responseClient.setMensaje(CotizadorMensajeAplicacion.obtenerPropiedad("mensaje_respuesta_cliente_creado"));	
					}
				} else {					
					this.transactionManager.rollback(statusTransaction);
					responseClient.setCodigo(new BigInteger(CotizadorMensajeAplicacion.obtenerPropiedad("codigo_respuesta_bad_request")));
					responseClient.setTipo(CotizadorMensajeAplicacion.obtenerPropiedad("tipo_respuesta_not_created"));
					responseClient.setMensaje(CotizadorMensajeAplicacion.obtenerPropiedad("mensaje_respuesta_cliente_no_creado"));
				}
			}else {
				responseClient.setCodigo(new BigInteger(CotizadorMensajeAplicacion.obtenerPropiedad("codigo_respuesta_unauthorized")));
				responseClient.setTipo(CotizadorMensajeAplicacion.obtenerPropiedad("tipo_respuesta_unauthorized"));
				responseClient.setMensaje(CotizadorMensajeAplicacion.obtenerPropiedad("mensaje_respuesta_unauthorized"));
			}
			return responseClient;
		} catch (Exception e) {
			this.transactionManager.rollback(statusTransaction);
			LOGGER.error("Error to try agregarCliente in Logica Negocio Layer: {}", e);
			responseClient.setCodigo(new BigInteger(CotizadorMensajeAplicacion.obtenerPropiedad("codigo_respuesta_internal_server_error")));
			responseClient.setTipo(CotizadorMensajeAplicacion.obtenerPropiedad("tipo_respuesta_internal_server_error"));
			responseClient.setMensaje(e.getMessage());
			return responseClient;
		} finally {
			autenticacion = null;
			clienteCreado = null;
			responseClient = null;
			definirTransaccion = null;
			statusTransaction = null;
		}
	}
	
}
